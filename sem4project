//models.js
const { DataTypes } = require('sequelize');
const bcrypt = require('bcryptjs');

module.exports = (sequelize) => {
  const User = sequelize.define('User', {
    email: { type: DataTypes.STRING, unique: true, allowNull: false },
    password: { type: DataTypes.STRING, allowNull: false },
    role: { type: DataTypes.ENUM('patient', 'provider'), allowNull: false },
  });

  // Password hashing
  User.beforeCreate(async (user) => {
    user.password = await bcrypt.hash(user.password, 10);
  });

  return User;
};

//models.js
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const { User } = require('../models');

exports.signup = async (req, res) => {
  try {
    const { email, password, role } = req.body;
    const user = await User.create({ email, password, role });
    res.json({ message: 'User created', user });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
};

exports.login = async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await User.findOne({ where: { email } });

    if (!user || !(await bcrypt.compare(password, user.password))) {
      return res.status(401).json({ message: 'Invalid credentials' });
    }

    const token = jwt.sign({ id: user.id, role: user.role }, 'your_jwt_secret');
    res.json({ message: 'Login successful', token });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
};

//routes.js

const express = require('express');
const { signup, login } = require('../controllers/authController');
const router = express.Router();
router.post('/signup', signup);
router.post('/login', login);
module.exports = router;


//appointment scheduling models.js
module.exports = (sequelize, DataTypes) => {
  const Appointment = sequelize.define('Appointment', {
    date: { type: DataTypes.DATE, allowNull: false },
    status: { type: DataTypes.STRING, allowNull: false, defaultValue: 'pending' },
  });

  Appointment.associate = (models) => {
    Appointment.belongsTo(models.User, { as: 'patient', foreignKey: 'patientId' });
    Appointment.belongsTo(models.User, { as: 'provider', foreignKey: 'providerId' });
  };

  return Appointment;
};

// controller.js
const { Appointment, User } = require('../models');

exports.createAppointment = async (req, res) => {
  try {
    const { providerId, date } = req.body;
    const appointment = await Appointment.create({
      patientId: req.user.id,
      providerId,
      date,
    });
    res.json({ message: 'Appointment created', appointment });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
};

